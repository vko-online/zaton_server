### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  bic: String!
  iban: String!
  id: String!
  name: String!
}

input AccountInput {
  bic: String!
  iban: String!
  name: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  bic: StringFilter
  Client: ClientWhereInput
  clientId: StringNullableFilter
  Company: CompanyWhereInput
  companyId: StringNullableFilter
  iban: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
}

type AuthPayload {
  token: String
  user: User
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Client {
  accounts: [Account!]!
  address: String
  companyName: String!
  contactFullName: String
  contactRole: String
  createdAt: DateTime!
  createdBy: User!
  docs: [Doc!]!
  email: String
  id: String!
  iin: String!
  ltv: Int
  note: String
  phone: String
  updatedAt: DateTime!
}

input ClientInput {
  """Client bank accounts"""
  accounts: [AccountInput]
  address: String
  companyName: String!
  contactFullName: String
  contactRole: String
  email: String
  id: ID
  iin: String!
  note: String
  phone: String
}

input ClientListRelationFilter {
  every: ClientWhereInput
  none: ClientWhereInput
  some: ClientWhereInput
}

input ClientWhereInput {
  accounts: AccountListRelationFilter
  address: StringNullableFilter
  AND: [ClientWhereInput!]
  Company: CompanyWhereInput
  companyId: StringNullableFilter
  companyName: StringFilter
  contactFullName: StringNullableFilter
  contactRole: StringNullableFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  createdById: StringFilter
  docs: DocListRelationFilter
  email: StringNullableFilter
  id: StringFilter
  iin: StringFilter
  ltv: IntNullableFilter
  NOT: [ClientWhereInput!]
  note: StringNullableFilter
  OR: [ClientWhereInput!]
  phone: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ClientWhereUniqueInput {
  id: String
}

type Company {
  accounts: [Account!]!
  address: String!
  bin: String
  clients(after: ClientWhereUniqueInput, before: ClientWhereUniqueInput, first: Int, last: Int, where: ClientWhereInput): [Client!]!
  createdAt: DateTime!
  currency: String
  docs: [Doc!]!
  email: String
  id: String!
  name: String!
  owner: User!
  phone: String!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
  updatedAt: DateTime!
  website: String
}

input CompanyInput {
  address: String!
  bin: String
  currency: String
  email: String
  name: String!
  phone: String!
  website: String
}

input CompanyUpdateInput {
  address: String
  bin: String
  currency: String
  email: String
  name: String
  phone: String
  website: String
}

input CompanyWhereInput {
  accounts: AccountListRelationFilter
  address: StringFilter
  AND: [CompanyWhereInput!]
  bin: StringNullableFilter
  clients: ClientListRelationFilter
  createdAt: DateTimeFilter
  currency: StringNullableFilter
  docs: DocListRelationFilter
  email: StringNullableFilter
  id: StringFilter
  logoUrl: StringNullableFilter
  name: StringFilter
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  owner: UserWhereInput
  ownerId: StringFilter
  phone: StringFilter
  products: ProductListRelationFilter
  stampUrl: StringNullableFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Doc {
  client: Client
  company: Company!
  createdAt: DateTime!
  createdBy: User!
  date: DateTime
  draft: Boolean!
  dueDate: DateTime
  id: String!
  note: String
  offer: Boolean!
  orders: [Order!]!
  sku: Int
  template: Boolean!
  total: Int
  updatedAt: DateTime!
}

input DocInput {
  clientId: ID!
  date: DateTime
  draft: Boolean!
  dueDate: DateTime
  offer: Boolean!
  orders: [OrderInput]
  sku: Int
  template: Boolean!
}

input DocListRelationFilter {
  every: DocWhereInput
  none: DocWhereInput
  some: DocWhereInput
}

input DocWhereInput {
  AND: [DocWhereInput!]
  client: ClientWhereInput
  clientId: StringNullableFilter
  company: CompanyWhereInput
  companyId: StringFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  createdById: StringFilter
  date: DateTimeNullableFilter
  draft: BoolFilter
  dueDate: DateTimeNullableFilter
  id: StringFilter
  NOT: [DocWhereInput!]
  note: StringNullableFilter
  offer: BoolFilter
  OR: [DocWhereInput!]
  orders: OrderListRelationFilter
  Product: ProductWhereInput
  productId: StringNullableFilter
  sku: IntNullableFilter
  template: BoolFilter
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createClient(data: ClientInput): Client
  createCompany(data: CompanyInput): Company
  deleteClient(id: ID): Client
  login(data: SigninInput): AuthPayload
  signup(data: SignupInput): AuthPayload
  updateCompany(data: CompanyUpdateInput): Company
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Order {
  id: String!
  product: Product!
  qty: Int!
}

input OrderInput {
  productId: ID!
  qty: Int!
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  Doc: DocWhereInput
  docId: StringNullableFilter
  id: StringFilter
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  product: ProductWhereInput
  productId: StringFilter
  qty: IntFilter
}

type Product {
  createdAt: DateTime!
  createdBy: User!
  docs: [Doc!]!
  id: String!
  ltv: Int
  name: String!
  price: Int!
  unit: String
  updatedAt: DateTime!
}

input ProductInput {
  description: String
  ltv: Int
  name: String!
  price: Int!
  unit: String
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  Company: CompanyWhereInput
  companyId: StringNullableFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  createdById: StringFilter
  description: StringNullableFilter
  docs: DocListRelationFilter
  id: StringFilter
  ltv: IntNullableFilter
  name: StringFilter
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  Order: OrderListRelationFilter
  price: IntFilter
  unit: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ProductWhereUniqueInput {
  id: String
}

type Query {
  client(id: ID!): Client
  clients: [Client]
  company: Company
  me: User
  users: [User]
}

input QueryInput {
  after: ID
  first: Int
  query: String
}

input SigninInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  name: String!
  password: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  company: Company
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Client: ClientListRelationFilter
  company: CompanyWhereInput
  createdAt: DateTimeFilter
  Doc: DocListRelationFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  Product: ProductListRelationFilter
  updatedAt: DateTimeFilter
}
